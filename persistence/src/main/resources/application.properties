# DataSource settings: set here your own configurations for the database
# connection. In this example we have "osbb" as database name and
# "root" as username and password.
spring.datasource.url = jdbc:postgresql://localhost:5432/osbb
spring.datasource.username = postgres
spring.datasource.password = noddod1491
spring.datasource.driver-class-name=org.postgresql.Driver

server.port=52430

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
spring.datasource.initial-size=1
spring.datasource.max-active=1
spring.datasource.max-idle=1
spring.datasource.min-idle=1

# Show or not log for each sql query
spring.jpa.show-sql = true

# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update

entitymanager.packagesToScan = com.softserve.osbb

#implementing second level cache
#no second level cache yet implemented

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQL9Dialect
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project

# Liquibase
liquibase.change-log = classpath:/db/changelog/db.changelog-master.json
liquibase.enabled = true
